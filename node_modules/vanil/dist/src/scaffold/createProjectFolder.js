"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSafeToCreateAppIn = exports.createProjectFolder = exports.logFiles = exports.ignoredPaths = void 0;
const fs_1 = require("fs");
const colors = __importStar(require("kleur/colors"));
const path_1 = require("path");
const shelljs_1 = __importDefault(require("shelljs"));
exports.ignoredPaths = [
    '.DS_Store',
    'Thumbs.db',
    '.git',
    '.gitignore',
    '.idea',
    'README.md',
    'LICENSE',
    '.hg',
    '.hgignore',
    '.hgcheck',
    '.npmignore',
    'mkdocs.yml',
    '.travis.yml',
    '.gitlab-ci.yml',
    '.gitattributes',
];
exports.logFiles = ['npm-debug.log', 'yarn-error.log', 'yarn-debug.log'];
const createProjectFolder = (projectPath, projectName, folderAlreadyExist = false) => {
    if (!folderAlreadyExist) {
        // create shallow directory structure
        shelljs_1.default.mkdir('-p', projectPath);
    }
    if (!(0, exports.isSafeToCreateAppIn)(projectPath, projectName)) {
        return false;
    }
    console.log(`Creating a new Vanil project in ${colors.green(projectPath)}.`);
    return true;
};
exports.createProjectFolder = createProjectFolder;
const isSafeToCreateAppIn = async (rootPath, name) => {
    console.log();
    const conflicts = (0, fs_1.readdirSync)(rootPath)
        .filter((file) => !exports.ignoredPaths.includes(file))
        // IntelliJ IDEA creates module files before CRA is launched
        .filter((file) => !/\.iml$/.test(file))
        // Don't treat log files from previous installation as conflicts
        .filter((file) => !exports.logFiles.some((pattern) => file.indexOf(pattern) === 0));
    if (conflicts.length > 0) {
        console.log(`The directory ${colors.green(name)} contains files that could conflict:`);
        console.log();
        for (const file of conflicts) {
            console.log(colors.red(`  ${file}`));
        }
        console.log();
        console.log('Either try using a new directory name, or remove the files listed above.');
        process.exit(1);
    }
    // Remove any remnant files from a previous installation
    const currentFiles = (0, fs_1.readdirSync)((0, path_1.join)(rootPath));
    for (let i = 0; i < currentFiles.length; i++) {
        const file = currentFiles[i];
        if (exports.logFiles.find((errorLogFilePattern) => file.indexOf(errorLogFilePattern) === 0)) {
            shelljs_1.default.rm('-rf', (0, path_1.join)(rootPath, file));
        }
    }
    return true;
};
exports.isSafeToCreateAppIn = isSafeToCreateAppIn;
