"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateClassName = void 0;
const colors = __importStar(require("kleur/colors"));
const validateClassName = (className) => {
    const forbiddenFirstCharacters = /[a-z0-9-]/g;
    let containsIrregularCharacter = false;
    if (forbiddenFirstCharacters.test(className[0])) {
        containsIrregularCharacter = true;
    }
    if (containsIrregularCharacter) {
        return `${colors.red(`The class '${colors.green(className)}' has invalid characters.\n` +
            'A class name should start uppercase but should NOT start with a number or dash.\n\n')}`;
    }
    return true;
};
exports.validateClassName = validateClassName;
