"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateProjectDirectoryInput = void 0;
const path_1 = require("path");
const concatErrors_1 = require("./concatErrors");
const validateClassName_1 = require("./validateClassName");
const colors = __importStar(require("kleur/colors"));
const validateProjectName = require('validate-npm-package-name');
const validateProjectDirectoryInput = async (projectDirectory) => {
    if (!projectDirectory) {
        return colors.red(`[!!] ERROR: Could not create a project called ${colors.red(`"${projectDirectory}"`)}:${(0, concatErrors_1.concatErrors)([
            'Project name is empty!',
        ])}`);
    }
    if (projectDirectory.startsWith(path_1.sep)) {
        return colors.red(`[!!] ERROR: Could not create a project called ${colors.red(`"${projectDirectory}"`)}:${(0, concatErrors_1.concatErrors)([
            'Setting a path is not allowed',
        ])}`);
    }
    const root = (0, path_1.resolve)(projectDirectory);
    const projectName = (0, path_1.basename)(root);
    const validationResult = validateProjectName(projectName.toLowerCase());
    const componentValidationResult = (0, validateClassName_1.validateClassName)(projectName);
    if (projectName.indexOf('.') > -1) {
        validationResult.validForNewPackages = false;
    }
    if (!validationResult.validForNewPackages || typeof componentValidationResult === 'string') {
        return `Could not create a project called ${colors.red(`"${projectName}"`)} because of npm naming restrictions: ${(0, concatErrors_1.concatErrors)(validationResult.errors)}${(0, concatErrors_1.concatErrors)(validationResult.warnings)}${componentValidationResult}`;
    }
    return true;
};
exports.validateProjectDirectoryInput = validateProjectDirectoryInput;
