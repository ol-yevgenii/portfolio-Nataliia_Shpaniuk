"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.camelToKebabCase = exports.kebabToCamelCase = exports.isProgramCodeFile = exports.copyAndMaterializeFile = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const colors = __importStar(require("kleur/colors"));
const TEMPLATE_LOWER_REGEX = /templatename/g;
const TEMPLATE_DASH_LOWER_REGEX = /template-name/g;
const TEMPLATE_LOWER_UPPER_REGEX = /templateName/g;
const TEMPLATE_UPPER_REGEX = /TemplateName/g;
const copyAndMaterializeFile = (options) => {
    const lcfirst = (s) => s.replace(/^\w/, (c) => c.toLocaleLowerCase());
    let fileName = (0, path_1.relative)(options.templateFolderPath, options.filePath)
        .replace(TEMPLATE_UPPER_REGEX, options.concreteName)
        .replace(TEMPLATE_LOWER_REGEX, options.concreteName)
        .replace(TEMPLATE_LOWER_UPPER_REGEX, lcfirst(options.concreteName))
        .replace(options.concreteName, (0, exports.camelToKebabCase)(options.concreteName).toLocaleLowerCase());
    if (fileName[0] === '-')
        fileName = fileName.substring(1);
    const newFilePath = (0, path_1.join)(options.projectPath, fileName);
    (0, fs_1.mkdirSync)((0, path_1.resolve)(newFilePath, '..'), { recursive: true });
    // whitelist
    if ((0, exports.isProgramCodeFile)(options.filePath)) {
        const programCode = (0, fs_1.readFileSync)(options.filePath, { encoding: 'utf8' })
            .replace(TEMPLATE_LOWER_REGEX, options.concreteName.toLocaleLowerCase())
            .replace(TEMPLATE_DASH_LOWER_REGEX, options.concreteName.toLocaleLowerCase())
            .replace(TEMPLATE_LOWER_UPPER_REGEX, lcfirst(options.concreteName))
            .replace(TEMPLATE_UPPER_REGEX, (0, exports.kebabToCamelCase)(options.concreteName));
        (0, fs_1.writeFileSync)(newFilePath, programCode);
    }
    else {
        (0, fs_1.copyFileSync)(options.filePath, newFilePath);
    }
    console.log(`- ${colors.cyan(fileName)}`);
};
exports.copyAndMaterializeFile = copyAndMaterializeFile;
const PROGRAM_CODE_FILE_EXTENSIONS = ['.astro', '.tsx', '.ts', '.html', '.css', '.json', '.json5', '.md'];
const isProgramCodeFile = (fileName) => {
    if (!fileName) {
        return false;
    }
    return !!PROGRAM_CODE_FILE_EXTENSIONS.find((value) => fileName.endsWith(value));
};
exports.isProgramCodeFile = isProgramCodeFile;
const kebabToCamelCase = (name = '') => name
    .replace(/-([a-z])/g, (g) => g[1].toUpperCase())
    // transform overall first character upper case too
    .replace(/([a-zA-Z])/, (g) => g[0].toUpperCase());
exports.kebabToCamelCase = kebabToCamelCase;
const camelToKebabCase = (name = '') => name.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, '$1-$2').toLowerCase();
exports.camelToKebabCase = camelToKebabCase;
