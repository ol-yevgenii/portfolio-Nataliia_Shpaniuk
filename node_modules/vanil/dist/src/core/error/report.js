"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderSSGErrorReport = void 0;
const path_1 = require("path");
const dev_1 = require("../../cli/dev");
const transpile_1 = require("../transform/transpile");
/** renders a static HTML page with livereload and panic-overlay integration */
const renderSSGErrorReport = (relativePath, ssgError, context) => {
    // connect to dev server for HMR on code changes
    const liveReloadRuntime = (0, transpile_1.loadAndTranspileCode)((0, path_1.resolve)(__dirname, '../runtime/livereload.ts'), 'js', 'scss', 'import', context).replace(/__VANIL_LIVE_RELOAD_URL/g, `"${(0, dev_1.getLiveReloadUrl)(context.config)}"`);
    if (!ssgError.linesOfError)
        ssgError.linesOfError = [];
    // error reporting panic-overlay
    return `<html>
    <head>
        <title>Node.js Error</title>
        <script>
            ${liveReloadRuntime}
        </script>

        <script>
            

\`

${relativePath} (or imported .astro component):
${ssgError.linesOfError.join('\n')}
\`
throw new ${ssgError.errorType}(\`${ssgError.errorMessage ? ssgError.errorMessage.trim() : ssgError}\`)
// this happened in Node.js while rendering server-side!
//



        </script>


        <script>

            setTimeout(() => {
                
                let selectedLine = document.querySelector('.panic-overlay__line-hili')

                if (selectedLine) {
                    selectedLine.parentNode.removeChild(selectedLine)

                    document.querySelectorAll('.panic-overlay__line')[1].className = 'panic-overlay__line panic-overlay__line-hili'
                }
            }, 10)
        </script>
    </head>
</html>`;
};
exports.renderSSGErrorReport = renderSSGErrorReport;
