"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAstroPageTemplate = exports.copyFiles = exports.copyModuleToDist = exports.copyModuleToDistAndBundleForBrowser = exports.isDynamicRoutingPath = exports.isGlobPath = exports.toDistFolderRelativePath = exports.toProjectRootRelativePath = exports.getHooksFolder = exports.getPublicFolder = exports.getDistFolder = exports.getPagesFolder = exports.getProjectRootFolder = void 0;
const esbuild_1 = require("esbuild");
const path_1 = require("path");
const fs = require('fs-extra');
// TODO: perf: can be cached
/** return absolutely resolved paths for the specific project folders */
const getProjectRootFolder = (config) => config.projectRoot;
exports.getProjectRootFolder = getProjectRootFolder;
const getPagesFolder = (config) => (0, path_1.resolve)((0, exports.getProjectRootFolder)(config), config.pages);
exports.getPagesFolder = getPagesFolder;
const getDistFolder = (config) => (0, path_1.resolve)((0, exports.getProjectRootFolder)(config), config.dist);
exports.getDistFolder = getDistFolder;
const getPublicFolder = (config) => (0, path_1.resolve)((0, exports.getProjectRootFolder)(config), config.public);
exports.getPublicFolder = getPublicFolder;
const getHooksFolder = (config) => (0, path_1.resolve)((0, exports.getProjectRootFolder)(config), config.hooks);
exports.getHooksFolder = getHooksFolder;
const toProjectRootRelativePath = (path, config) => path.replace((0, exports.getProjectRootFolder)(config), '.');
exports.toProjectRootRelativePath = toProjectRootRelativePath;
const toDistFolderRelativePath = (path, config) => path.replace((0, exports.getDistFolder)(config), '');
exports.toDistFolderRelativePath = toDistFolderRelativePath;
const isGlobPath = (path) => path.indexOf('*') > -1 || path.indexOf('{') > -1;
exports.isGlobPath = isGlobPath;
const isDynamicRoutingPath = (path) => path.indexOf('[') > -1 && path.indexOf(']') > -1;
exports.isDynamicRoutingPath = isDynamicRoutingPath;
const copyModuleToDistAndBundleForBrowser = async (context, moduleName, entryPointPath) => new Promise((resolveCb) => {
    const bundlePath = `${entryPointPath}.bundle.js`;
    const distFolder = (0, exports.getDistFolder)(context.config);
    const moduleDistPath = (0, path_1.resolve)(distFolder, 'node_modules', moduleName);
    const projectRootFolder = (0, exports.getProjectRootFolder)(context.config);
    const modulePath = (0, path_1.resolve)(projectRootFolder, 'node_modules', moduleName);
    // copy over node_modules/$moduleName to dist/node_modules/$moduleName
    // so that it can be fetch()ed and evaluated
    (0, exports.copyFiles)(modulePath, moduleDistPath);
    // bundle js dependency using esbuild (inline all require() calls)
    (0, esbuild_1.buildSync)({
        entryPoints: [entryPointPath],
        bundle: true,
        write: true,
        format: 'cjs',
        platform: 'neutral',
        allowOverwrite: true,
        minify: context.mode === 'production',
        metafile: context.mode === 'development',
        outfile: bundlePath,
    });
    resolveCb();
});
exports.copyModuleToDistAndBundleForBrowser = copyModuleToDistAndBundleForBrowser;
const copyModuleToDist = (context, moduleName) => {
    const distFolder = (0, exports.getDistFolder)(context.config);
    const projectRootFolder = (0, exports.getProjectRootFolder)(context.config);
    const modulePath = (0, path_1.resolve)(projectRootFolder, 'node_modules', moduleName);
    const moduleDistPath = (0, path_1.resolve)(distFolder, 'node_modules', moduleName);
    (0, exports.copyFiles)(modulePath, moduleDistPath);
};
exports.copyModuleToDist = copyModuleToDist;
const copyFiles = (fromPath, toPath) => {
    try {
        fs.copySync(fromPath, toPath, {
            dereference: true,
        });
    }
    catch (e) {
        if (e) {
            throw new Error(`Error copying ${fromPath} to: ${toPath}: ${e}`);
        }
    }
};
exports.copyFiles = copyFiles;
/** verfies if a .astro template is stored in the pages folder */
const isAstroPageTemplate = (astroFileCandidate, config) => astroFileCandidate.indexOf((0, exports.getPagesFolder)(config)) > -1 && astroFileCandidate.endsWith('.astro');
exports.isAstroPageTemplate = isAstroPageTemplate;
