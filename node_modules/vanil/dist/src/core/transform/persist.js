"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.persistFileAbsolute = exports.persistFileDist = exports.persistVanilPage = void 0;
const path_1 = require("path");
const shelljs_1 = __importDefault(require("shelljs"));
const fs_1 = require("fs");
const folders_1 = require("../io/folders");
const context_1 = require("./context");
/** writes out the generated content as a file in dist folder */
const persistVanilPage = async (context, content) => {
    var _a;
    // uses (pre-)materialized path in case of dynamic routing (see routing.ts),
    // else the static template path to the .astro file
    const path = context.materializedPath ? context.materializedPath : context.path;
    let relativeTargetPath = path.split(context.config.pages.replace('.', ''))[1];
    // encode as URI component so that it can be routed well
    relativeTargetPath = relativeTargetPath
        .split('/')
        .map((pathPartName) => encodeURIComponent(pathPartName))
        .join('/');
    let destPath = (0, path_1.join)((0, folders_1.getDistFolder)(context.config), relativeTargetPath);
    if (((_a = context.config.buildOptions) === null || _a === void 0 ? void 0 : _a.pageUrlFormat) === 'directory') {
        destPath = destPath.replace('.astro', '');
    }
    else {
        destPath = destPath.replace('.astro', '.html');
    }
    // assign for HMR update event filtering
    (0, context_1.addMaterializedHtmlFilePath)(destPath, context);
    return (0, exports.persistFileAbsolute)(destPath, content);
};
exports.persistVanilPage = persistVanilPage;
/**
 * persists an arbitrary file, resolving its absolute destination path by
 * only having a path relative to the dist folder
 */
const persistFileDist = async (relativeTargetPath, content, context) => (0, exports.persistFileAbsolute)((0, path_1.join)((0, folders_1.getDistFolder)(context.config), relativeTargetPath), content);
exports.persistFileDist = persistFileDist;
/** persists a file and recursively creates the path if necessary */
const persistFileAbsolute = (destPath, content) => {
    // create shallow directory structure
    shelljs_1.default.mkdir('-p', (0, path_1.dirname)(destPath));
    // remove file first
    if ((0, fs_1.existsSync)(destPath)) {
        shelljs_1.default.rm(destPath);
    }
    // write file contents
    return (0, fs_1.writeFileSync)(destPath, content, { encoding: 'utf8' });
};
exports.persistFileAbsolute = persistFileAbsolute;
