import { Context } from '../../@types/context';
/**
 * import(path), import ... from path, Vanil.fetchContent(path)
 * relative import resolve logic (e.g. ../components or )
 */
export declare const resolvePathRelative: (targetPath: string, path: string) => string;
export declare const isDir: (path: string) => boolean;
/** decides if a path is a relative import (relative to a path) */
export declare const isRelativePathImport: (path: string) => boolean;
/** returns an absolute import path or a :// protocol import path based on a relative import */
export declare const resolveImportForRuntimeInteractiveCode: (importPath: string, path?: string) => string;
/** uses the node resolve algorithm to discover and rewrite paths to absolute paths */
export declare const resolveNodeAbsolute: (importPath: string, relImportPath: string) => any;
/** resolves a Node.js module imports (for SSG Node.js top level code) */
export declare const resolveNodeImport: (importPath: string, context: Context, relImportPath?: string | undefined) => string;
/** materializes a module import selecting a file by extension, priority */
export declare const materializePathSelectFile: (path: string) => string;
/** decides if the file is a (valid) absolute source file path import (file exists and extension supported) */
export declare const isAbsoluteFileImportTarget: (path: string) => boolean;
/** decides if an import/require target path looks like //foo/bar or https://, etc. */
export declare const isRemoteImportTarget: (path: string) => boolean;
/**
 * used for processing inside of tsx() where {} TSX expressions can happen
 * in <* href={} and <* src={} scanarios
 */
export declare const isRelativeSrcTarget: (srcTarget: string) => boolean;
