"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.invalidateCache = exports.addToCache = exports.getFromCache = exports.hashCode = void 0;
const CRC32 = require('crc-32');
/** calculates a CRC32+length hash for input untranspiled code for quick lookup */
const hashCode = (untranspiledCode) => `${CRC32.str(untranspiledCode)}${untranspiledCode.length}`;
exports.hashCode = hashCode;
/** tries to retrieve transpiled code for untranspiled code */
const getFromCache = (untranspiledCode, context) => {
    //undefined
    if (!context.codeCache[context.path])
        context.codeCache[context.path] = {};
    // TODO: cache disabled until re-implementation
    //return undefined
    return context.codeCache[context.path][(0, exports.hashCode)(untranspiledCode)];
};
exports.getFromCache = getFromCache;
/** for an untranspiled piece of code, store the transpiled one */
const addToCache = (untranspiledCode, transpiledCode, context, force = false) => {
    if (!context.codeCache[context.path])
        context.codeCache[context.path] = {};
    // TODO: cache disabled until re-implementation
    //if (force) {
    context.codeCache[context.path][(0, exports.hashCode)(untranspiledCode)] = transpiledCode;
    //}
    return transpiledCode;
};
exports.addToCache = addToCache;
/** removes the codeCache for an .astro file */
const invalidateCache = (context) => {
    if (!context.codeCache)
        context.codeCache = {};
    delete context.codeCache[context.path];
    return;
};
exports.invalidateCache = invalidateCache;
