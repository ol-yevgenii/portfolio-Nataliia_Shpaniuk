import { CodeBundle } from './parse';
import { Context } from '../../@types/context';
export declare type ResultLanguageType = 'js' | 'css';
export declare type SourceLanguageType = 'tsx' | 'scss';
export declare type InjectionIntent = 'import' | 'hoist';
export declare const TS_IMPORT_POLYFILL_SCRIPT = "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });";
/** strips away the getStaticPaths function impl that may occur
 * in dynamic routing .astro page templates.
 * These use "export" which is prohibited here because we're
 * running the code in a CommonJS setting */
export declare const stripGetStaticPathsFnDecl: (code: string, context: Context) => string;
/** takes the typeScriptCode and htmlCode; transpiles into an atomic async function */
export declare const transpileTemplate: (codeBundle: CodeBundle, context: Context) => string;
/** inlines code of require() calls towards .astro component template files */
export declare const inlineTranspileImportedVanilComponents: (transpiledCode: string, context: Context) => string;
export declare const inlineTranspileAbsoluteRequires: (transpiledCode: string, context: Context) => string;
/** transpiles SSG code in general */
export declare const transpileSSGCode: (scriptCode: string, context: Context, relImportPath?: string | undefined) => string;
/** transpiles and wraps runtime code; cares for re-ordering imports */
export declare const transpileRuntimeInteractiveScriptCode: (scriptCode: string, splitImports: boolean | undefined, path: string | undefined, injectionIntent: InjectionIntent | undefined, context: Context) => string;
/** transpiles arbitrary ts/tsx code as CJS module type code */
export declare const transpileTSX: (code: string, context: Context, injectionIntent?: InjectionIntent) => string;
/** transpiles style code using PostCSS; this is called from different stages */
export declare const transpileStyleCode: (styleCode: string, attributes: any, context: Context) => string;
/** style code that has been marked for post-processing is replaced here */
export declare const replaceStyleReplacements: (htmlCode: string, context: Context) => string;
/** helper function, used to transpile code hoised in tsx() transform  */
export declare const loadAndTranspileCode: (absolutePath: string, type: ResultLanguageType, attributes: any, injectionIntent: InjectionIntent | undefined, context: Context) => string;
/** escapes syntax characters prone to immediate evaluation */
export declare const escapeCurlyBracketsAndBackticks: (code: string) => string;
/** unescapes syntax characters prone to immediate evaluation */
export declare const uncapeCurlyBracketsAndBackticks: (code: string) => string;
/**
 * escapes and transpiles inline script code before it is passed to the
 * server-side transpiler and evaluation; this is necessary to "numb" such
 * runtime-interactive code as it shouldn't be executed server-side at all
 */
export declare const escapeAndNumbInlineStyleAndScriptTags: (tsxCode: string, context: Context) => string;
