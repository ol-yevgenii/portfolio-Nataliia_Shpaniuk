import { Context } from '../../@types/context';
import { DynamicRoutingParameterMap, PaginationParams, PageParamsAndProps } from '../../@types/routing';
export declare const RE_PARAM_WRAPPERS: RegExp;
export declare const parseDynamicRoutingPath: (context: Context) => DynamicRoutingParameterMap;
/** implements parsing for getStaticPaths() function declarations and extracts the code */
export declare const parseForGetStaticPathsFn: (wholeSsgCode: string) => Promise<unknown>;
/**
 * chunks the data in slices of paginationParams.pageSize and
 * generates a page prop to be passed to each page */
export declare const paginate: (data: Array<any>, paginationParams: PaginationParams) => any[];
export interface MaterializedPage {
    materializedPath: string;
    pageParamsAndProps: PageParamsAndProps;
}
/**
 * parses the given .astro page files path for dynamic routing parts
 * (e.g. [foo] or [...foo]), isolates the getStaticPaths function and
 * generates a list of materialized paths that represent all possible
 * permutations; returns these, together with the corresponding props
 */
export declare const materializeDynamicRoutingPaths: (context: Context) => Promise<MaterializedPage[]>;
/** generates the path URI relative to the dist folder and depending on the URI format */
export declare const getPathUri: (materializedPath: string, context: Context) => string;
/** generates the effective page URL based on the site and materialized path */
export declare const getPageUrl: (materializedPath: string, context: Context) => string;
