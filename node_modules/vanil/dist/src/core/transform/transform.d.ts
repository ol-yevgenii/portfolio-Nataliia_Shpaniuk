import { ScriptExecutionError } from './vm';
import { Context } from '../../@types/context';
/** does only parse, transpile, run a single .astro template without post-processing */
export declare const transformTemplate: (templatePath: string, context: Context) => string;
export declare const renderError: (context: Context, error: ScriptExecutionError) => Promise<any>;
/** transforms a single .astro template file */
export declare const transformSingle: (context: Context) => Promise<any>;
export declare const transformAndPersistSingle: (context: Context) => Promise<void>;
/**
 * support for HTML comment syntax in TSX input:
 * remove all <!-- comment --> HTML comments from TSX input
 */
export declare const stripHtmlComments: (htmlCode: string) => string;
/** checks if code requires async/await; wraps in async-IIFE in case  */
export declare const mayWrapInAsyncIIFE: (scriptCode: string, force?: boolean) => string;
/** declares local exports = {} when exports. is used in code */
export declare const mayDeclareExports: (scriptCode: string, force?: boolean) => string;
/** wraps code in an (() => { ...code ... })() construct
 * ([i]mmediately [i]nvoked [f]unction [e]xpression) */
export declare const wrapInIIFE: (scriptCode: string) => string;
/** transforms script code imports to use const { ... } = Vanil syntax for from "vanil" imports */
export declare const transformVanilImports: (scriptCode: string) => string;
