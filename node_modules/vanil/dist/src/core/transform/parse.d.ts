import { Context } from '../../@types';
export interface CodeBundle {
    typeScriptCode: string;
    htmlCode: string;
}
/** Splits the --- typeScriptCode --- htmlCode sections */
export declare const parseTemplate: (templatePath: string, context: Context) => CodeBundle;
interface ImportAndCodeStatements {
    importStatements: string;
    codeStatements: string;
}
/**
 * parses code for single or multiline synchonous import statements,
 * but ignores comments and dynamic imports
 */
export declare const parseImportStatements: (typeScriptCode: string, onlySync?: boolean) => Array<string>;
/** rewrites imports from the "vanil" package and dynamically link to runtime loaded */
export declare const rewriteVanilImports: (importStmts: Array<string>) => string[];
/** strips import statements from code (e.g. to place them in the output code re-ordered) */
export declare const stripSyncImportStatements: (typeScriptCode: string, importStmts: Array<string>) => string;
/**
 * typeScriptCode can contain top-level import statements,
 * these need to be idenfied and stripped from the rest of the code
 */
export declare const splitTopLevelImports: (typeScriptCode: string) => ImportAndCodeStatements;
export declare const ParsingRegexp: {
    script: RegExp[];
    style: RegExp[];
};
export interface Attrs {
    [attributeName: string]: string;
}
export interface TagMatch {
    index: number;
    pos: number;
    attrs: Attrs;
}
export declare type ProcessTagFn = (tagContent: string, attrs: Attrs) => string;
export declare const processTags: (tagName: string, tagMatchers: Array<RegExp>, tsxCode: string, processTagFn: ProcessTagFn) => string;
export declare const processScriptTags: (tsxCode: string, processTagFn: ProcessTagFn) => string;
export declare const processStyleTags: (tsxCode: string, processTagFn: ProcessTagFn) => string;
export declare const RE_REQUIRE_STMT_FN: RegExp;
/**
 * matches calls for require() and replaces them by callback function returned replacement code.
 * This code works safely because it runs on transpiled code; therefore comments are stripped away
 * already and "matching commented out code" cannot happen
 */
export declare const processRequireFunctionCalls: (code: string, processFn: (importPath: string) => string, filterForFileEnding?: string | undefined) => string;
/** ECMAScript parser to correctly detect blocks { and } to extract function declarations by RegExp */
export declare const processGSPFunctionDeclaration: (code: string, cb: (fnCode?: string | undefined) => void) => void;
export {};
