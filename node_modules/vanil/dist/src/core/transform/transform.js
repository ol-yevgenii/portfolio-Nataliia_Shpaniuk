"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformVanilImports = exports.wrapInIIFE = exports.mayDeclareExports = exports.mayWrapInAsyncIIFE = exports.stripHtmlComments = exports.transformAndPersistSingle = exports.transformSingle = exports.renderError = exports.transformTemplate = void 0;
const path_1 = require("path");
const colors = __importStar(require("kleur/colors"));
const parse_1 = require("./parse");
const transpile_1 = require("./transpile");
const dom_1 = require("./dom");
const persist_1 = require("./persist");
const optimize_1 = require("../optimize/optimize");
const vm_1 = require("./vm");
const report_1 = require("../error/report");
const folders_1 = require("../io/folders");
/** does only parse, transpile, run a single .astro template without post-processing */
const transformTemplate = (templatePath, context) => {
    const codeBundle = (0, parse_1.parseTemplate)(templatePath, context);
    return (0, transpile_1.transpileTemplate)(codeBundle, context);
};
exports.transformTemplate = transformTemplate;
const renderError = (context, error) => {
    const html = (0, report_1.renderSSGErrorReport)((0, folders_1.toProjectRootRelativePath)(context.path, context.config), error, context);
    if (!(0, folders_1.isAstroPageTemplate)(context.path, context.config)) {
        // we're facing an error inside of a .astro component
        // but we must save the compilation result back to the
        // hosting .astro page template file (materialized)
        context.path = context.astroPageTemplatePath;
    }
    return (0, optimize_1.optimize)(html, context);
};
exports.renderError = renderError;
/** transforms a single .astro template file */
const transformSingle = async (context) => {
    let html;
    let result;
    try {
        // change to file directory so that
        // SSG imports are relative to the .astro
        // template file instrinsically
        process.chdir((0, path_1.dirname)(context.path));
        const timeStart = Date.now();
        const transformedTemplateCode = (0, exports.transformTemplate)(context.path, context);
        const timeTransformFinish = Date.now();
        result = await (0, vm_1.run)(transformedTemplateCode, context);
        if (result.error) {
            console.error('ERROR: SSG Node.js execution error', result.error.original);
            return (0, exports.renderError)(context, result.error);
        }
        const timeExecutionFinish = Date.now();
        html = await (0, dom_1.materializeDOM)(result, context);
        const timeRenderFinish = Date.now();
        // TODO: color times according to actual time spent
        console.log(colors.dim('perf (ms):'), colors.green(timeTransformFinish - timeStart), colors.dim('(compile)'), colors.green(timeExecutionFinish - timeTransformFinish), colors.dim('(run)'), colors.green(timeRenderFinish - timeExecutionFinish), colors.dim('(render)'));
    }
    catch (e) {
        console.error(colors.red('ERROR: Transfrom, run or render failed!'), result && result.error ? result.error.original : e);
        return (0, exports.renderError)(context, {
            errorType: e.name,
            errorMessage: e.message.split('\n')[0],
        });
    }
    return (0, optimize_1.optimize)(html, context);
};
exports.transformSingle = transformSingle;
const transformAndPersistSingle = async (context) => {
    // (re)set .astro page template path
    context.astroPageTemplatePath = context.path;
    return (0, persist_1.persistVanilPage)(context, await (0, exports.transformSingle)(context));
};
exports.transformAndPersistSingle = transformAndPersistSingle;
/**
 * support for HTML comment syntax in TSX input:
 * remove all <!-- comment --> HTML comments from TSX input
 */
const stripHtmlComments = (htmlCode) => {
    // global (all occurrances) + multiline support using RegExp flag
    return htmlCode.replace(/<!--(.*)-->/gm, '');
};
exports.stripHtmlComments = stripHtmlComments;
/** checks if code requires async/await; wraps in async-IIFE in case  */
const mayWrapInAsyncIIFE = (scriptCode, force = false) => {
    if (/await[\s]*?/.test(scriptCode) || force) {
        return `\n(async() => {${scriptCode}})()\n`;
    }
    return scriptCode;
};
exports.mayWrapInAsyncIIFE = mayWrapInAsyncIIFE;
/** declares local exports = {} when exports. is used in code */
const mayDeclareExports = (scriptCode, force = false) => {
    if (/exports\./.test(scriptCode) || force) {
        return scriptCode + '\nreturn exports\n';
    }
    return scriptCode;
};
exports.mayDeclareExports = mayDeclareExports;
/** wraps code in an (() => { ...code ... })() construct
 * ([i]mmediately [i]nvoked [f]unction [e]xpression) */
const wrapInIIFE = (scriptCode) => `\n(() => {${scriptCode}})()\n`;
exports.wrapInIIFE = wrapInIIFE;
/** transforms script code imports to use const { ... } = Vanil syntax for from "vanil" imports */
const transformVanilImports = (scriptCode) => {
    const importStmts = (0, parse_1.parseImportStatements)(scriptCode, false /* include await import() dynamic imports too */);
    const rewroteImportStmts = (0, parse_1.rewriteVanilImports)(importStmts);
    rewroteImportStmts.forEach((rewroteImportStmt, i) => {
        scriptCode = scriptCode.replace(importStmts[i], rewroteImportStmt);
    });
    return scriptCode;
};
exports.transformVanilImports = transformVanilImports;
