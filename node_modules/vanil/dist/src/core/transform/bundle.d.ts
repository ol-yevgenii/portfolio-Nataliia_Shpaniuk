import { Context } from '../../@types/context';
import { Mode } from '../../@types/context/Mode';
import { FeatureFlagActivationMap } from '../../@types/context/featureflags';
/** returns the feature flags as an array of names */
export declare const featureFlagsArray: (featureFlags: FeatureFlagActivationMap) => string[];
/** generates a distinct name for a interactive runtime library variant */
export declare const getInteractiveRuntimeVariantName: (featureFlags: FeatureFlagActivationMap) => string;
/** verifies if the runtime lib needs to be injected by checking if at least one of the flags are active */
export declare const requiresInteractiveRuntimeLibrary: (featureFlags: FeatureFlagActivationMap) => boolean;
/** loads all parts of the interactive runtime library, concats them  */
export declare const bundleInteractiveRuntimeLibrary: (context: Context, featureFlags: FeatureFlagActivationMap) => string;
export declare const extractAllScriptCodeFromVdom: (node: any) => string;
/** runtime library feature detector based on actual generated code */
export declare const detectRuntimeLibraryFeatures: (node: any, mode: Mode) => FeatureFlagActivationMap;
/** processes all require(...) statements and inflates, transpiles, bundles its code recursively */
export declare const bundleRequires: (code: string, path: string | undefined, context: Context) => string;
/** stringifies the state to be accessible via Vanil.state  */
export declare const bundleRuntimeState: (runtimeState: any, context: Context) => string;
/** hoists the interactive Vanil runtime */
export declare const injectInteractiveRuntimeLibrary: (document: Document, headElement: Element, context: Context, runtimeState: any) => void;
