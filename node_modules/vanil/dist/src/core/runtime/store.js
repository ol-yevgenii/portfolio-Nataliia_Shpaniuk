"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.restore = exports.persist = exports.getLocalStorage = exports.getSessionStorage = exports.getMockStorage = void 0;
Vanil.store = {};
const getMockStorage = () => {
    return {
        getItem: (key) => Vanil.store[key],
        setItem: (key, value) => (Vanil.store[key] = value),
    };
};
exports.getMockStorage = getMockStorage;
const getSessionStorage = () => {
    try {
        return sessionStorage;
    }
    catch (e) {
        // can throw SecurityException
        return (0, exports.getMockStorage)();
    }
};
exports.getSessionStorage = getSessionStorage;
const getLocalStorage = () => {
    try {
        return localStorage;
    }
    catch (e) {
        // can throw SecurityException
        return (0, exports.getMockStorage)();
    }
};
exports.getLocalStorage = getLocalStorage;
const persist = (key, api, store) => {
    api.setItem(key, JSON.stringify(store.store[key]));
    return store;
};
exports.persist = persist;
const restore = (key, store, api, defaultValue) => {
    store.set(key, JSON.parse(api.getItem(key) || '""') || defaultValue);
};
exports.restore = restore;
Vanil.get = (key, defaultValue) => typeof Vanil.store[key] === 'undefined' ? defaultValue : Vanil.store[key];
Vanil.set = (key, value) => {
    Vanil.store[key] = value;
    return Vanil;
};
Vanil.load = (key, defaultValue) => {
    (0, exports.restore)(key, Vanil, (0, exports.getLocalStorage)(), defaultValue);
    return Vanil;
};
Vanil.save = (key) => (0, exports.persist)(key, (0, exports.getLocalStorage)(), Vanil);
Vanil.loadForSession = (key, defaultValue) => {
    (0, exports.restore)(key, Vanil, (0, exports.getSessionStorage)(), defaultValue);
    return Vanil;
};
Vanil.saveForSession = (key) => (0, exports.persist)(key, (0, exports.getSessionStorage)(), Vanil);
