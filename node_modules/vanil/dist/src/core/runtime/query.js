"use strict";
// === CSS
Object.defineProperty(exports, "__esModule", { value: true });
exports.on = exports.off = exports.replaceWith = exports.remove = exports.update = exports.text = exports.html = exports.empty = exports.val = exports.attr = exports.hasClass = exports.toggleClass = exports.removeClass = exports.removeSingleClass = exports.addClass = exports.addSingleClass = void 0;
const addSingleClass = (ref, className) => {
    if (!ref.classList.contains(className)) {
        ref.classList.add(className);
    }
};
exports.addSingleClass = addSingleClass;
const addClass = (ref, impl) => (className) => {
    if (className instanceof Array) {
        for (let i = 0; i < className.length; i++) {
            (0, exports.addSingleClass)(ref, className[i]);
        }
    }
    else {
        (0, exports.addSingleClass)(ref, className);
    }
    return impl;
};
exports.addClass = addClass;
const removeSingleClass = (ref, className) => {
    if (ref.classList.contains(className)) {
        ref.classList.remove(className);
    }
};
exports.removeSingleClass = removeSingleClass;
const removeClass = (ref, impl) => (className) => {
    if (className instanceof Array) {
        for (let i = 0; i < className.length; i++) {
            (0, exports.removeSingleClass)(ref, className[i]);
        }
    }
    else {
        (0, exports.removeSingleClass)(ref, className);
    }
    return impl;
};
exports.removeClass = removeClass;
const toggleClass = (ref, impl) => (className) => {
    ref.classList.toggle(className);
    return impl;
};
exports.toggleClass = toggleClass;
const hasClass = (ref) => (className) => ref.classList.contains(className);
exports.hasClass = hasClass;
// === DOM HIERARCHY
const attr = (ref, impl) => (name, value) => {
    if (typeof value === 'undefined')
        return ref.getAttribute(name);
    ref.setAttribute(name, value);
    return impl;
};
exports.attr = attr;
const val = (ref, impl) => (value) => {
    const isCheckbox = ref.type === 'checkbox';
    if (typeof value === 'undefined') {
        return isCheckbox ? ref.checked : ref.value;
    }
    if (isCheckbox) {
        ;
        ref.checked = value;
    }
    else {
        ;
        ref.value = value;
    }
    return impl;
};
exports.val = val;
const empty = (ref, impl) => () => {
    ref.innerHTML = '';
    return impl;
};
exports.empty = empty;
const html = (ref, impl) => (html) => {
    if (html) {
        ref.innerHTML = html;
        return impl;
    }
    else {
        return ref.innerHTML;
    }
};
exports.html = html;
const text = (ref, impl) => (text) => {
    if (text) {
        // @ts-ignore
        ref.innerText = text;
        return impl;
    }
    else {
        // @ts-ignore
        return ref.innerText;
    }
};
exports.text = text;
const update = (ref, impl) => (vdom) => {
    (0, exports.empty)(ref, impl)();
    ref.appendChild(Vanil.render(vdom, ref));
    return impl;
};
exports.update = update;
const remove = (ref, impl) => () => {
    if (ref.parentNode)
        ref.parentNode.removeChild(ref);
    return impl;
};
exports.remove = remove;
const replaceWith = (ref, impl) => (vdom) => {
    const el = Vanil.render(vdom, ref);
    if (ref.parentNode) {
        ref.parentNode.replaceChild(el, ref);
    }
    return impl;
};
exports.replaceWith = replaceWith;
// === DOM EVENTS
const off = (ref, impl) => (eventName, handler) => {
    ref.removeEventListener(eventName, handler);
    return impl;
};
exports.off = off;
const on = (ref, impl) => (eventName, handler) => {
    ref.addEventListener(eventName, handler);
    return impl;
};
exports.on = on;
/** $(...), Vanil.query(...), Vanil.$(...) or even recursively down the tree  */
Vanil.$ = function (selector, root) {
    const el = selector instanceof Element ? selector : root ? root.querySelector(selector) : document.querySelector(selector);
    if (!el) {
        throw new Error(`Element for selector ${selector} not found!`);
    }
    const queryFn = (selector) => Vanil.$(selector, el);
    const getImpl = (el) => {
        let impl = {
            el,
        };
        impl.$ = queryFn;
        impl.attr = (0, exports.attr)(el, impl);
        impl.val = (0, exports.val)(el, impl);
        impl.empty = (0, exports.empty)(el, impl);
        impl.update = (0, exports.update)(el, impl);
        impl.html = (0, exports.html)(el, impl);
        impl.text = (0, exports.text)(el, impl);
        impl.remove = (0, exports.remove)(el, impl);
        impl.replaceWith = (0, exports.replaceWith)(el, impl);
        impl.addClass = (0, exports.addClass)(el, impl);
        impl.removeClass = (0, exports.removeClass)(el, impl);
        impl.toggleClass = (0, exports.toggleClass)(el, impl);
        impl.hasClass = (0, exports.hasClass)(el);
        impl.on = (0, exports.on)(el, impl);
        impl.off = (0, exports.off)(el, impl);
        return impl;
    };
    return getImpl(el);
};
