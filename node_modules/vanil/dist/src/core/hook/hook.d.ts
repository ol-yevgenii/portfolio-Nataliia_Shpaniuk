import { Context } from '../../@types/context';
/** each hook is called with stage-specific props (e.g. page hooks receive page props) and the context */
export declare type HookFn = (context: Context, props?: any) => Promise<void>;
export declare type HookStage = 'onContext' | 'onDevServerStart' | 'onStart' | 'onBeforePage' | 'onAfterPage' | 'onFinish';
export declare const HOOK_NAMES: string[];
export interface HookRegistrations {
    initialized: boolean;
    perStage: {
        [hookStage: string]: Array<HookFn>;
    };
}
export declare const isHookName: (hookName: string) => boolean;
/** matches a file paths basename (file name) without extensions with an allowed hook name */
export declare const isHookFile: (path: string) => boolean;
export declare const registerHook: (context: Context, stage: HookStage, fn: HookFn) => void;
/** globs hooks in a projects hooks folder, requires them and registers valid hook functions  */
export declare const loadProjectHooks: (context: Context) => Promise<void>;
/** registers core hooks to execute standard functionality */
export declare const loadCoreHooks: (context: Context) => Promise<void>;
/** imports the hooks that may be found in a project */
export declare const registerHooks: (context: Context) => Promise<void>;
/** run hooks assigned for a specific state */
export declare const runHooks: (hookStage: HookStage, context: Context, props?: any) => Promise<void>;
