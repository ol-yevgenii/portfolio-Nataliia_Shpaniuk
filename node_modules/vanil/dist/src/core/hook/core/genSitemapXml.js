"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.genSitemapXml = void 0;
const folders_1 = require("../../io/folders");
const routing_1 = require("../../transform/routing");
const js2xmlparser_1 = require("js2xmlparser");
const colors = __importStar(require("kleur/colors"));
const persist_1 = require("../../transform/persist");
const genSitemapUrl = (url) => ({
    loc: url,
});
const genSitemapXml = async (context, props) => {
    var _a;
    if (((_a = context.config.buildOptions) === null || _a === void 0 ? void 0 : _a.sitemap) && context.materializedHtmlFilePaths) {
        const distFolder = (0, folders_1.getDistFolder)(context.config);
        console.log(colors.bold(colors.dim('hook (genSitemapXml):')), colors.gray(`Generating ${(0, folders_1.toProjectRootRelativePath)(distFolder, context.config)}/sitemap.xml...`));
        const pageUrls = [
            {
                loc: context.config.buildOptions.site,
                lastmod: new Date().toISOString().substring(0, 10),
                changefreq: 'daily',
                priority: '1.0',
            },
        ];
        const templatePaths = Object.keys(context.materializedHtmlFilePaths);
        // walk all .astro page template paths
        templatePaths.forEach((templatePath) => {
            const materializedPagePaths = context.materializedHtmlFilePaths[templatePath];
            // walk all materialized HTML pages
            materializedPagePaths.forEach((pagePath) => pageUrls.push(genSitemapUrl((0, routing_1.getPageUrl)(pagePath.replace(distFolder, ''), context))));
        });
        // transform to https://www.sitemaps.org/protocol.html
        // and persist in dist folder, sitemap.xml
        (0, persist_1.persistFileDist)('sitemap.xml', (0, js2xmlparser_1.parse)('urlset', {
            '@': {
                xmlns: 'http://www.sitemaps.org/schemas/sitemap/0.9',
            },
            url: pageUrls,
        }), context);
    }
};
exports.genSitemapXml = genSitemapXml;
