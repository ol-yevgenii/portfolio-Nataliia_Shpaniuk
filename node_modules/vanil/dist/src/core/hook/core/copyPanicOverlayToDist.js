"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyPanicOverlayToDist = exports.panicOverlayFilename = void 0;
const folders_1 = require("../../io/folders");
const colors = __importStar(require("kleur/colors"));
const path_1 = require("path");
const fs_1 = require("fs");
const fast_glob_1 = __importDefault(require("fast-glob"));
exports.panicOverlayFilename = 'panic-overlay.browser.js';
/** copy files and directories recursively from public to dist */
const copyPanicOverlayToDist = async (context) => {
    const distFolder = (0, folders_1.getDistFolder)(context.config);
    const distPath = (0, path_1.resolve)(distFolder, 'js', exports.panicOverlayFilename);
    if (!(0, fs_1.existsSync)(distPath)) {
        console.log(colors.bold(colors.dim('hook (copyPanicOverlayToDist):')), colors.gray(`Copying ${exports.panicOverlayFilename} to ${(0, folders_1.toProjectRootRelativePath)((0, folders_1.getDistFolder)(context.config), context.config)}/js folder...`));
        fast_glob_1.default.sync((0, path_1.resolve)(__dirname, '../../error/panic-overlay*')).forEach((path) => {
            (0, folders_1.copyFiles)(path, (0, path_1.resolve)((0, folders_1.getDistFolder)(context.config), 'js', (0, path_1.basename)(path)));
        });
    }
};
exports.copyPanicOverlayToDist = copyPanicOverlayToDist;
