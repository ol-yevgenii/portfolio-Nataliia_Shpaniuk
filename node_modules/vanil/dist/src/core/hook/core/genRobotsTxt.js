"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.genRobotsTxt = void 0;
const persist_1 = require("../../transform/persist");
const colors = __importStar(require("kleur/colors"));
const folders_1 = require("../../io/folders");
const EOL = '\n';
const genRobotsTxt = async (context) => {
    var _a;
    (0, persist_1.persistFileDist)('robots.txt', render((_a = context.config.buildOptions) === null || _a === void 0 ? void 0 : _a.robotsTxt, context), context);
};
exports.genRobotsTxt = genRobotsTxt;
const toArray = (value) => {
    if (value === undefined)
        return [];
    if (Array.isArray(value))
        return value;
    return [value];
};
const render = (config, context) => {
    console.log(colors.bold(colors.dim('hook (genRobotsTxt):')), colors.gray(`Generating ${(0, folders_1.toProjectRootRelativePath)((0, folders_1.getDistFolder)(context.config), context.config)}/robots.txt...`));
    let SitemapArray = [];
    let HostArray = [];
    let output = toArray(config)
        .map((robot) => {
        let userAgentArray = [];
        if (robot.userAgent && Array.isArray(robot.userAgent)) {
            userAgentArray = robot.userAgent.map((userAgent) => `User-agent: ${userAgent}`);
        }
        else if (robot.userAgent) {
            userAgentArray.push(`User-agent: ${robot.userAgent}`);
        }
        if (robot.crawlDelay) {
            userAgentArray.push(`Crawl-delay: ${robot.crawlDelay}`);
        }
        if (robot.sitemap) {
            SitemapArray = SitemapArray.concat(robot.sitemap);
        }
        if (robot.host) {
            HostArray = HostArray.concat(robot.host);
        }
        return userAgentArray
            .concat(toArray(robot.disallow).map((disallow) => {
            if (Array.isArray(disallow)) {
                return disallow.map((line) => `Disallow: ${line}`).join('\n');
            }
            return `Disallow: ${disallow}`;
        }))
            .join(EOL);
    })
        .join(EOL);
    if (SitemapArray.length > 0) {
        output += `${EOL}${SitemapArray.map((sitemap) => `Sitemap: ${sitemap}`).join(EOL)}`;
    }
    if (HostArray.length > 0) {
        output += `${EOL}${HostArray.map((host) => `Host: ${host}`).join(EOL)}`;
    }
    return output;
};
