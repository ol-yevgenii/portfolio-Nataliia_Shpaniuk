"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.optimize = void 0;
const colors = __importStar(require("kleur/colors"));
const prettify_1 = require("./development/prettify");
const copyPanicOverlayToDist_1 = require("../hook/core/copyPanicOverlayToDist");
const { minify } = require('html-minifier-terser');
/** takes HTML, parses it, and optimizes holistically */
const optimize = async (html, context) => {
    let optimizedHtml;
    const optimizeStartTime = Date.now();
    // run optimizations
    if (context.mode === 'development') {
        // add panic-overlay
        html = `<script role="panic-overlay-devonly" src="/js/${copyPanicOverlayToDist_1.panicOverlayFilename}"></script>${html}`;
        html = `<link role="panic-overlay-devonly" rel="stylesheet" href="/js/${copyPanicOverlayToDist_1.panicOverlayFilename}.css" />${html}`;
        if (context.config.devOptions.useOptimizer) {
            // format HTML nicely
            optimizedHtml = (0, prettify_1.prettify)(html);
            console.log(colors.dim(`perf (ms):`), colors.green(Date.now() - optimizeStartTime), colors.dim(`(optimizer)`));
        }
        else {
            optimizedHtml = html;
        }
    }
    else {
        // optimize for size (performance) -> minify
        optimizedHtml = await minify(html, {
            caseSensitive: true,
            collapseInlineTagWhitespace: true,
            collapseWhitespace: true,
            conservativeCollapse: true,
            continueOnParseError: true,
            keepClosingSlash: true,
            minifyCSS: true,
            minifyJS: true,
            minifyURLs: true,
            removeComments: true,
            removeRedundantAttributes: true,
            removeScriptTypeAttributes: true,
            removeStyleLinkTypeAttributes: true,
            useShortDoctype: true,
        });
        console.log(colors.dim(`perf (ms):`), colors.green(Date.now() - optimizeStartTime), colors.dim(`(optimizer)`));
    }
    return optimizedHtml;
};
exports.optimize = optimize;
