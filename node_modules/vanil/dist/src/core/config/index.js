"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.finalizeConfig = exports.getDefaultConfig = exports.getExecutionMode = void 0;
const defaults_1 = require("./defaults");
const getExecutionMode = () => (process.env.NODE_ENV || 'development');
exports.getExecutionMode = getExecutionMode;
/** returns the default project config */
const getDefaultConfig = () => ({
    projectRoot: process.cwd(),
    dist: defaults_1.CONFIG_DIST_FOLDER,
    src: defaults_1.CONFIG_SRC_FOLDER,
    pages: defaults_1.CONFIG_PAGES_FOLDER,
    public: defaults_1.CONFIG_PUBLIC_FOLDER,
    hooks: defaults_1.CONFIG_HOOKS_FOLDER,
    buildOptions: {
        site: undefined,
        sitemap: defaults_1.CONFIG_BUILD_SITEMAP,
        robotsTxt: defaults_1.CONFIG_BUILD_ROBOTS_TXT,
        pageUrlFormat: defaults_1.CONFIG_BUILD_PAGE_URL_FORMAT,
    },
    devOptions: {
        useTls: defaults_1.CONFIG_DEVOPTIONS_USETLS,
        hostname: defaults_1.CONFIG_DEVOPTIONS_HOSTNAME,
        port: defaults_1.CONFIG_DEVOPTIONS_PORT,
        useOptimizer: defaults_1.CONFIG_DEVOPTIONS_USEOPTIMIZER,
    },
});
exports.getDefaultConfig = getDefaultConfig;
const finalizeConfig = (config) => {
    var _a, _b, _c, _d, _e;
    const protocolAndHostname = `${((_a = config.devOptions) === null || _a === void 0 ? void 0 : _a.useTls) ? 'https' : 'http'}://${(_b = config.devOptions) === null || _b === void 0 ? void 0 : _b.hostname}`;
    if (!config.buildOptions.site) {
        config.buildOptions.site = protocolAndHostname;
    }
    if (config.devOptions.port !== 80 && ((_c = config.devOptions) === null || _c === void 0 ? void 0 : _c.port) !== 443) {
        config.buildOptions.site = `${protocolAndHostname}:${(_d = config.devOptions) === null || _d === void 0 ? void 0 : _d.port}`;
    }
    if (!((_e = config.devOptions) === null || _e === void 0 ? void 0 : _e.tlsOptions)) {
        config.devOptions.tlsOptions = {
            cert: 'cert.pem',
            key: 'key.pem',
        };
    }
    if (config.buildOptions.sitemap) {
        ;
        config.buildOptions.robotsTxt.sitemap = config.buildOptions.site + '/sitemap.xml';
    }
};
exports.finalizeConfig = finalizeConfig;
