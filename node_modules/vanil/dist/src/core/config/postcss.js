"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPostCSSPlugins = void 0;
const file_1 = require("../io/file");
const context_1 = require("../transform/context");
const path_1 = require("path");
// https://github.com/postcss/autoprefixer
const autoprefixer = require('autoprefixer');
// https://github.com/postcss/postcss-nested
const postcssNested = require('postcss-nested');
// https://github.com/postcss/postcss-import
const postcssImport = require('postcss-import-sync2');
// 96% browser coverage
// https://browserslist.dev/?q=PiAwLjA1JSwgbm90IGllID4gMA%3D%3D
const DEFAULT_BROWSERSLIST = ['> 0.05%', 'not ie > 0'];
/** determines the default PostCSS plugins to use */
const getPostCSSPlugins = (context) => {
    const projectPackageJson = (0, file_1.readPackageJson)(context);
    const defaultPlugins = [
        /** allows to @import stylesheets */
        postcssImport({
            resolve: (importPath) => {
                const path = (0, path_1.resolve)((0, path_1.dirname)(context.path), importPath);
                // add @import("$importPath") to file dependencies for HMR
                (0, context_1.addFileDependency)(path, context);
                return path;
            },
        }),
        /** allows prefixing for older browsers [compatibility] */
        autoprefixer({
            overrideBrowserslist: projectPackageJson.browserslist || DEFAULT_BROWSERSLIST,
        }),
        /** allow nested rule definition to be exflated */
        postcssNested(),
    ];
    return defaultPlugins;
};
exports.getPostCSSPlugins = getPostCSSPlugins;
