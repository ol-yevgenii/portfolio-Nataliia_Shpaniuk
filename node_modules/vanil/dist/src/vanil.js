#!/usr/bin/env node
'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const semver = __importStar(require("semver"));
/** `vanil $commandName` */
const main = async () => {
    const { cli } = await Promise.resolve().then(() => __importStar(require('./cli/cli')));
    try {
        cli(process.argv);
    }
    catch (error) {
        console.error(error);
        process.exit(1);
    }
    const version = process.versions.node;
    const { default: pkg } = await Promise.resolve().then(() => __importStar(require((0, path_1.resolve)(__dirname, '../package.json'))));
    const engines = pkg.engines.node;
    const isSupported = semver.satisfies(version, engines);
    if (!isSupported) {
        console.error(`\nNode.js v${version} is not supported by Vanil!
Please upgrade Node.js to a supported version: "${engines}"\n`);
        process.exit(1);
    }
};
main();
