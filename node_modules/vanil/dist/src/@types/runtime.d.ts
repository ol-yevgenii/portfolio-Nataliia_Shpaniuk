import { Context } from './context';
import { PageParamsAndProps } from './routing';
import { ChangeLanguageFn, i18nApi, Language, SetTranslationsFn, TranslationFn, Translations } from './runtime/i18n';
import { LoadFn, LoadForSessionFn, SaveFn, SaveForSessionFn, Store, StoreApi } from './runtime/store';
import { IVirtualChild, VDomApi } from './runtime/vdom';
import { AddEventHandlerFn, EventApi, EventRegistryMap, GenericEventHandlerFn } from './runtime/event';
import { ElementRefs, RenderApi, RenderFn } from './runtime/render';
import { BusApi, EmitFn, ListenFn, MuteFn, Subscribers } from './runtime/bus';
import { QueryApi, QueryFn } from './runtime/query';
import { TsxFn } from './runtime/vdom';
import { GetFn, SetFn } from './runtime/store';
import { DebugFn } from './runtime/components/Debug';
import { CodeFn } from './runtime/components/Code';
import { LinkFn } from './runtime/components/Link';
import { ScriptFn } from './runtime/components/Script';
import { TransFn } from './runtime/components/Trans';
import { MarkdownFn } from './runtime/components/Markdown';
import { TranslationFnNs } from '.';
export * from './runtime/index';
export interface SSGRuntime extends StoreApi, i18nApi {
    mode: 'development' | 'production';
    slots: {
        [slotName: string]: IVirtualChild;
    };
    request: {
        url: string;
    } & PageParamsAndProps;
    props: {
        context: Context;
        state: any;
        [propName: string]: any;
    };
    fetch: FetchFn;
    resolve: ResolveFn;
    fetchContent: FetchContentFn;
    restartOnFileChange: RestartOnFileChangeFn;
    setPropsState: SetPropsStateFn;
    isPage: boolean;
    isBrowser: boolean;
    site: string;
    Debug: typeof Debug;
    Script: typeof Script;
    Link: typeof Link;
    Code: typeof Code;
    Trans: typeof Trans;
    Markdown: typeof Markdown;
}
export interface InteractiveRuntime extends SSGRuntime, BusApi, QueryApi, EventApi, VDomApi, RenderApi {
    /**
     * checks the exports type (called with typeof exports) and
     * returns an empty object or the exisiting one in scope
     */
    exports: (exportsType: string) => {
        [exportName: string]: any;
    };
}
export declare type JSONSerializable = string | number | object | Array<JSONSerializable> | boolean | null;
export declare type RuntimeState = {
    [key: string]: JSONSerializable;
};
export declare const props: {
    [key: string]: any;
    context: Context;
};
export declare const request: {
    params: {
        [key: string]: any;
    };
    url: string;
};
export declare type FetchFn = (input: RequestInfo, init?: RequestInit) => Promise<Response>;
export declare const fetch: FetchFn;
export declare type FetchContentFn = (pathGlob: string) => Array<any>;
export declare const fetchContent: FetchContentFn;
export declare type ResolveFn = (path: string) => string;
export declare const resolve: ResolveFn;
export declare type RestartOnFileChangeFn = (path: string) => void;
export declare const restartOnFileChange: RestartOnFileChangeFn;
export declare const isPage: boolean;
export declare const Debug: DebugFn;
export declare const Code: CodeFn;
export declare const Link: LinkFn;
export declare const Script: ScriptFn;
export declare const Trans: TransFn;
export declare const Markdown: MarkdownFn;
export declare const tsx: TsxFn;
export declare const $: QueryFn;
export declare const render: RenderFn;
export declare const refs: ElementRefs;
export declare const e: GenericEventHandlerFn;
export declare const events: EventRegistryMap;
export declare const on: AddEventHandlerFn;
export declare const language: Language;
export declare const translations: Translations;
export declare const changeLanguage: ChangeLanguageFn;
export declare const t: TranslationFn;
export declare const tNs: TranslationFnNs;
export declare const setTranslations: SetTranslationsFn;
export declare const emit: EmitFn;
export declare const mute: MuteFn;
export declare const listen: ListenFn;
export declare const subscribers: Subscribers;
export declare const store: Store;
export declare const get: GetFn;
export declare const set: SetFn;
export declare const load: LoadFn;
export declare const save: SaveFn;
export declare const loadForSession: LoadForSessionFn;
export declare const saveForSession: SaveForSessionFn;
export declare type SetPropsStateFn = (state: RuntimeState) => void;
export declare const setPropsState: SetPropsStateFn;
